openapi: 3.0.0
info:
  title: Clinical
  version: 1.0.0
security:
  - bearerAuth: ['PROGRAMDATA-${programId}.WRITE', 'CLINICALSERVICE.WRITE']
paths:
  /health:
    get:
      tags:
        - Health
      summary: get status of app and various app components
      responses:
        '500':
          description: 'app is not fully healthy'
        '200':
          description: 'all components reporting healthy status'
          content:
            application/json:
              schema:
                type: object

  /submission/configs:
    get:
      tags:
        - Submission Configurations
      summary: Get all submission service configs
      responses:
        '200':
          description: 'Submissions config object'

  /submission/configs/submission-disabled:
    get:
      tags:
        - Submission Configurations
      summary: Get current state of submission service for sample registration and clinical submission
      responses:
        '200':
          description: 'Boolean value of whether submission system is disabled or enabled'
    patch:
      tags:
        - Submission Configurations
      summary: Disable or Enable the submission service for sample registration and clinical submission.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                submissionDisabled:
                  description: set to true/false to enable/disable the submission service.
                  type: boolean
      responses:
        '500':
          description: 'Failed to set submissionDisabled'
        '200':
          description: 'Sample registration and Clinical Submission disabled state has been set'

  /dictionary:
    get:
      tags:
        - Dictionary
      summary: Get current ARGO dictionary used by clinical
      responses:
        '200':
          description: 'the current loaded schema by the clinical submission'
          content:
            application/json:
              schema:
                type: object
  /dictionary/migration/run:
    post:
      tags:
        - Dictionary Migration
        - Admin
      summary: Run dicitonary migration to update clinical dictionary (use dry-run-update to verify migration behavior first)
      description: 'update and load a new schema version from lectern to be used.'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  description: the new schema version to update to.
                  type: string
      responses:
        '200':
          description: 'a dictioary migration object describing the migration run'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DictionaryMigration'
  /dictionary/migration/dry-run-update:
    post:
      tags:
        - Dictionary Migration
        - Admin
      summary: Dry-Run a migration to verify expected result (doesn't make donors invalid)
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                version:
                  description: the new schema version to update to.
                  type: string
      responses:
        '200':
          description: 'the dry-run-update migration details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DictionaryMigration'
  /dictionary/migration/resume:
    post:
      tags:
        - Dictionary Migration
        - Admin
      summary: Resume open migration (there can only be one open migration)
      description: 'Resume an active migration'
      responses:
        '200':
          description: 'the resumed migration details'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DictionaryMigration'
  /dictionary/migration/{migrationId}:
    get:
      tags:
        - Dictionary Migration
        - Admin
      summary: Fetch migration document for given id
      parameters:
        - name: migrationId
          description: the id of a specific migration to fetch
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'the one matching the id provided'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DictionaryMigration'
  /dictionary/migration/:
    get:
      tags:
        - Dictionary Migration
        - Admin
      summary: Fetch all migration documents
      responses:
        '200':
          description: 'A list of all migrations'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DictionaryMigration'
  /dictionary/changes:
    get:
      tags:
        - Dictionary
      summary: See analysis & breaking changes between two dictionary versions
      parameters:
        - name: from
          description: the old version
          in: query
          required: true
          schema:
            type: string
        - name: to
          description: the new version
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: 'an object containing the diff between the two schema versions & the breaking changes found'
          content:
            application/json:
              schema:
                type: object
  /dictionary/list:
    get:
      tags:
        - Dictionary
      summary: Get list of schema names in dictionary, with option to get schema field names (excludes sample_registration)
      parameters:
        - name: includeFields
          description: include fields of each schema in the response
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 'a list of all current loaded schema for clinical submission (without sample_registration)'
          content:
            application/json:
              schema:
                oneOf:
                  - type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                        fields:
                          type: array
                          items:
                            type: string
                  - type: array
                    items:
                      type: string

  /dictionary/template/all:
    get:
      tags:
        - Dictionary
      summary: Get a zip file with tsv templates for all dictionary schemas
      parameters:
        - name: excludeSampleRegistration
          description: boolean value for excluding sample registration file, default to false.
          in: query
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: 'A zip file with all schemas'
          content:
            application/zip:
              schema:
                type: string
                format: binary
  /dictionary/template/{schemaName}:
    parameters:
      - name: schemaName
        description: the name of the schema to generate the template for
        in: path
        required: true
        schema:
          example: 'sample_registration'
          type: string
    get:
      tags:
        - Dictionary
      summary: Get a tsv template file for specified schema name
      responses:
        '200':
          description: 'A tsv template file for the given schemaName'
          content:
            text/tab-separated-values:
              schema:
                example: 'program_id\tsubmitter_donor_id\tgender\tsubmitter_specimen_id\tspecimen_type\ttumour_normal_designation\tsubmitter_sample_id\tsample_type'
                type: string

  /submission/program/{programId}/registration:
    parameters:
      - $ref: '#/components/parameters/PathProgramId'
    get:
      tags:
        - Sample Registration
      summary: Get active registration
      description: returns the current in progress registration for a program if any
      responses:
        '200':
          description: 'the current in progress registration or empty body if nothing found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Registration'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      tags:
        - Sample Registration
      summary: Upload registration file
      description: This will validate and save the new registration file overwriting any existing registration
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                registrationFile:
                  type: string
                  format: binary
        description: the tsv registration file
        required: true
      responses:
        '400':
          $ref: '#/components/responses/FileStructureError'
        '422':
          description: 'invalid registration file'
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful:
                    type: boolean
                    description: will be false in this case
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/RegistrationValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
        '201':
          description: 'the file is valid and registration was created'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateRegistration'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /submission/program/{programId}/registration/{id}:
    delete:
      tags:
        - Sample Registration
      summary: Clear active registration
      description: Removes all active registration data for this program
      parameters:
        - $ref: '#/components/parameters/PathRegistrationId'
        - $ref: '#/components/parameters/PathProgramId'
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
        '200':
          description: 'the registration was deleted from db'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /submission/program/{programId}/registration/{id}/commit:
    post:
      tags:
        - Sample Registration
      summary: Commit registration
      description: Save the active registration data for this program, registering IDs for all new Samples, Specimens, and Donors introduced
      parameters:
        - $ref: '#/components/parameters/PathRegistrationId'
        - $ref: '#/components/parameters/PathProgramId'
      responses:
        '200':
          description: 'The registration was committed and the donors / specimens / samples added to the clinical db'
          content:
            application/json:
              schema:
                type: object
                properties:
                  newSamples:
                    type: array
                    items:
                      type: string
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /submission/program/{programId}/clinical/:
    get:
      tags:
        - Submission
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
      summary: Get active submission for a program
      description: returns the current in progress submission for a program if any
      responses:
        '200':
          description: 'the current in progress clinical submission or empty body if nothing found'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicalSubmission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /submission/program/{programId}/clinical/upload:
    post:
      tags:
        - Submission
      summary: Upload clinical submission files
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                clinicalFiles:
                  type: array
                  items:
                    type: string
                    format: binary
        description: the tsv clinical submission file
        required: true
      responses:
        '200':
          description: 'the current in progress clinical submission'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSubmission'
        '207':
          description: 'successful schema validation with some unprocessable files'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSubmission'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '422':
          description: 'unsuccessful schema validation failed on files'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreateSubmission'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /submission/program/{programId}/clinical/{versionId}/{fileType}:
    delete:
      tags:
        - Submission
      summary: Remove file from the active submission
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
        - $ref: '#/components/parameters/PathVersionId'
        - name: fileType
          description: the type name of the file that should be cleared, ex. 'specimen'
          in: path
          required: true
          schema:
            type: string
      description: Clears data for the specified file type from the active submission, removes all validation and resets the submission status to OPEN. Cannot be performed if the submission is in PENDING_APPROVAL state.
      responses:
        '200':
          description: 'Data cleared succesfully. Returns the current active clinical submission or empty body if no submission data is available.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicalSubmission'
        '400':
          description: Version ID does not match version of active submission.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Active submission is not in a state that can be cleared (ex. PENDING_APPROVAL)
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /submission/program/{programId}/clinical/{versionId}/all:
    delete:
      tags:
        - Submission
      summary: Remove all data from the active clinical submission
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
        - $ref: '#/components/parameters/PathVersionId'
      description: Clears all data from the active submission. Removes all validation and deletes the submission. Cannot be performed if the submission is in PENDING_APPROVAL state.
      responses:
        '200':
          description: 'Data cleared succesfully. Returns the current active clinical submission or empty body if no submission data is available.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicalSubmission'
        '400':
          description: Version ID does not match version of active submission.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Active submission is not in a state that can be cleared (ex. PENDING_APPROVAL)
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /submission/program/{programId}/clinical/validate/{versionId}:
    post:
      tags:
        - Submission
      summary: Validate data for clinical submission
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
        - $ref: '#/components/parameters/PathVersionId'
      responses:
        '200':
          description: 'in progress submission with a VALID or PENDING_APPROVAL state'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicalSubmission'
        '400':
          description: Version ID does not match version of active submission.
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Active submission is not in a state that can be cleared (ex. OPEN)
        '422':
          description: 'invalid clinical submission, see error messages'
          content:
            application/json:
              schema:
                type: object
                properties:
                  successful:
                    type: boolean
                    description: will be false in this case
                  errors:
                    type: array
                    items:
                      $ref: '#/components/schemas/ValidationError'
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /submission/program/{programId}/clinical/commit/{versionId}:
    post:
      tags:
        - Submission
      summary: Commit data from clinical submission
      description: Commit in progress clinical submission to the clinical DB. Requires Submission to be in VALID state.
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
        - $ref: '#/components/parameters/PathVersionId'
      responses:
        '200':
          description: The uploaded clinical submission data was committed to the clinical DB
        '400':
          description: Version ID does not match version of active submission
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Active submission is not in VALID state and cannot be commited, or another data issue was found that prevented successfully committing the data.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /submission/program/{programId}/clinical/approve/{versionId}:
    post:
      tags:
        - Submission
      summary: Approve a clinical submission
      description: Approve and commit in progress clinical submission to the clinical DB. Requires Submission to be in PENDING_APPROVAL state, and can only be performed by a DCC Admin user.
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
        - $ref: '#/components/parameters/PathVersionId'
      responses:
        '200':
          description: The uploaded clinical submission data was committed to the clinical DB
        '400':
          description: Version ID does not match version of active submission
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Active submission is not in PENDING_APPROVAL state and cannot be commited, or another data issue was found that prevented successfully committing the data.
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'
  /submission/program/{programId}/clinical/reopen/{versionId}:
    post:
      tags:
        - Submission
      summary: Reopen a clinical submission
      description: Reopen in progress clinical submission (clears all stats). Requires Submission to be in PENDING_APPROVAL state, and can only be performed by a DCC Admin user.
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
        - $ref: '#/components/parameters/PathVersionId'
      responses:
        '200':
          description: The uploaded clinical submission data was reopened
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClinicalSubmission'
        '400':
          description: Version ID does not match version of active submission
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '409':
          description: Active submission is not in PENDING_APPROVAL state and cannot be reopned
        '500':
          $ref: '#/components/responses/ServerError'
        '503':
          $ref: '#/components/responses/ServiceUnavailableError'

  /submission/icgc-import/preprocess/{programId}:
    parameters:
      - $ref: '#/components/parameters/PathProgramId'
    post:
      tags:
        - ICGC Import
        - Admin
      summary: transform icgc donor samples data to argo format sample registration
      responses:
        '200':
          description: transformed donors array in argo format, you need to download the response and use the import api if it looks good to you.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - samples
              properties:
                samples:
                  description: 'TSV file exported from song containing samples for a program, see wiki for how to get it.'
                  type: string
                  format: binary
  /submission/icgc-import/:
    post:
      tags:
        - ICGC Import
        - Admin
      summary: imports the json body (donors) to the clinical donors collection obtained from the preprocess api
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - donors
              properties:
                donors:
                  type: string
                  format: binary
      responses:
        '201':
          description: imported successfully - will indicate number of new donors and number of updated donors

  /clinical/donors:
    get:
      deprecated: true
      tags:
        - Deprecated
      summary: Get all program donors from db
      parameters:
        - $ref: '#/components/parameters/QueryProgramId'
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
        '200':
          description: 'List of donors for the given program'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
    delete:
      tags:
        - Test
      summary: Test endpoint to delete program donors in db (disabled in prod)
      parameters:
        - $ref: '#/components/parameters/QueryProgramId'
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
        '200':
          description: 'all donors deleted'
  /clinical/program/{programId}/donor/{donorId}:
    get:
      tags:
        - Clinical Data
      summary: Get all clinical data for a single donor, using the DonorID
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
        - $ref: '#/components/parameters/PathDonorId'
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
        '200':
          description: 'All clinical data for a donor'
          content:
            application/json:
              schema:
                type: object
  /clinical/program/{programId}/donors:
    get:
      tags:
        - Clinical Data
      summary: Get all program donors from db, returns as stream
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
        '200':
          description: 'Stream of newline `\n` delimited JSON objects'

  /clinical/program/:programId/submitted-data:
    get:
      tags:
        - Clinical Data
      summary: Get all program submitted data from db, returns as stream
      parameters:
        - $ref: '#/components/parameters/PathProgramId'
      responses:
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/ServerError'
        '200':
          description: 'Stream of newline `\n` delimited JSON objects'

  /clinical/program/{programId}/tsv-export:
    parameters:
      - $ref: '#/components/parameters/PathProgramId'
    get:
      deprecated: true
      tags:
        - Deprecated
      summary: Get all commited clinical data for a program
      description: Returns a zip file with all commited clinical and sample_registration data in tsvs. Exported data may not be valid with current dictionary.
      responses:
        '200':
          description: 'A zip file with tsv file(s) inside'
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid programId provided
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /clinical/program/{programId}/tsv/all:
    parameters:
      - $ref: '#/components/parameters/PathProgramId'
    get:
      tags:
        - Clinical Data
      summary: Get all commited clinical data for a program
      description: Returns a zip file with all commited clinical and sample_registration data in tsvs. Exported data may not be valid with current dictionary.
      responses:
        '200':
          description: 'A zip file with tsv file(s) inside'
          content:
            application/zip:
              schema:
                type: string
                format: binary
        '400':
          description: Invalid programId or entityType provided
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /clinical/program/{programId}/tsv/{entityType}:
    parameters:
      - $ref: '#/components/parameters/PathProgramId'
      - $ref: '#/components/parameters/PathEntityType'
    get:
      tags:
        - Clinical Data
      summary: Get all commited clinical data for a program
      description: Returns a zip file with all commited clinical and sample_registration data in tsvs. Exported data may not be valid with current dictionary.
      responses:
        '200':
          description: 'A zip file with tsv file(s) inside'
          content:
            text/tab-separated-value:
              schema:
                type: string

        '400':
          description: Invalid programId provided
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/ServerError'
  /clinical/donors/id:
    get:
      tags:
        - Clinical Data
      summary: Get ARGO ID of donor given program and submitter_donor_id
      parameters:
        - $ref: '#/components/parameters/QueryProgramId'
        - $ref: '#/components/parameters/QuerySubmitterId'
      responses:
        '200':
          description: the id of the donor
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: no matching donor found
  /clinical/specimens/id:
    get:
      tags:
        - Clinical Data
      summary: Get ARGO ID of donor specimen given program and submitter_specimen_id
      parameters:
        - $ref: '#/components/parameters/QueryProgramId'
        - $ref: '#/components/parameters/QuerySubmitterId'
      responses:
        '200':
          description: the id of the specimen
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: no matching specimen found
  /clinical/samples/id:
    get:
      tags:
        - Clinical Data
      summary: Get ARGO ID of donor sample given program and submitter_sample_id
      parameters:
        - $ref: '#/components/parameters/QueryProgramId'
        - $ref: '#/components/parameters/QuerySubmitterId'
      responses:
        '200':
          description: the id of the sample
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: no matching sample found
  /clinical/donor/{donorId}/completion-stats:
    patch:
      tags:
        - Patch Operations
        - Admin
      summary: Used to override donor aggregatedInfoStats
      description: For coreCompletionOverride, only the ones defined will be overridden the rest will be recalculated
      parameters:
        - name: donorId
          description: the argo donorId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                coreCompletionOverride:
                  type: object
                  properties:
                    donor:
                      type: number
                    treatments:
                      type: number
                    primaryDiagnosis:
                      type: number
                    followUps:
                      type: number
                    specimens:
                      type: number
      responses:
        '200':
          description: 'Donor with updated stats'

  /submission/schema:
    get:
      deprecated: true
      summary: 'use  `GET /dictionary` instead'
      tags:
        - Deprecated
    patch:
      deprecated: true
      summary: 'use  `POST /dictionary/migration/run` instead'
      tags:
        - Deprecated
  /submission/schema/dry-run-update:
    post:
      deprecated: true
      summary: 'use `POST /dictionary/migration/dry-run-update` instead'
      tags:
        - Deprecated
  /submission/schema/migration/resume:
    post:
      deprecated: true
      summary: 'use `POST /dictionary/migration/resume` instead'
      tags:
        - Deprecated
  /submission/schema/migration/{migrationId}:
    get:
      deprecated: true
      summary: 'use `GET /dictionary/migration/{migrationId}` instead'
      tags:
        - Deprecated
  /submission/schema/migration/:
    get:
      deprecated: true
      summary: 'use `GET /dictionary/migration` instead'
      tags:
        - Deprecated
  /submission/schema/changes:
    get:
      deprecated: true
      summary: 'use `GET /dictionary/changes` instead'
      tags:
        - Deprecated
  /submission/schema/list:
    get:
      deprecated: true
      summary: 'use `GET /dictionary/list` instead'
      tags:
        - Deprecated
  /submission/schema/template/all:
    get:
      deprecated: true
      summary: 'use `GET /dictionary/template/all` instead'
      tags:
        - Deprecated
  /submission/schema/template/{schemaName}:
    get:
      deprecated: true
      summary: 'use `GET /dictionary/template/{schemaName}` instead'
      tags:
        - Deprecated

servers:
  - url: /
tags:
  - name: Health
    description: Service status monitoring
  - name: Submission Configurations
    description: Submission Service Configurations
  - name: Dictionary
    description: View the Data Dictionary used by Argo-Clinical
  - name: Dictionary Migration
    description: Update Data Dictionary and manage migrations
  - name: Sample Registration
    description: Registering new Donors, Specimens, and Samples
  - name: Submission
    description: Uploading, Validating, and Committing clinical data
  - name: Clinical Data
    description: ''
  - name: Patch Operations
    description: Clinical Service Patch Operations
  - name: ICGC Import
    description: APIs to do the icgc import
  - name: Admin
    description: Admin operations collected for convenience
  - name: Test
    description: Protected endpoints that run in dev only, not in prod.
  - name: Deprecated
    description: Deprecated enpoints
components:
  parameters:
    QueryProgramId:
      name: programId
      description: Short Name of the program (ex. ABCD-EF)
      in: query
      required: true
      schema:
        type: string
    QuerySubmitterId:
      name: submitterId
      description: Submitter Id of the entity
      in: query
      required: true
      schema:
        type: string
    PathEntityType:
      name: entityType
      description: Clinical Entity Type name
      in: path
      required: true
      schema:
        type: string
    PathProgramId:
      name: programId
      description: Short Name of the program (ex. ABCD-EF)
      in: path
      required: true
      schema:
        type: string
    PathDonorId:
      name: donorId
      description: DonorId (ex. DO1234)
      in: path
      required: true
      schema:
        type: string
    PathRegistrationId:
      name: id
      description: the id of the registration
      in: path
      required: true
      schema:
        type: string
    PathVersionId:
      name: versionId
      description: UUID used to confirm the registration/submission version
      in: path
      required: true
      schema:
        type: string
  responses:
    ServiceUnavailableError:
      description: Endpoint service unavailable
    UnauthorizedError:
      description: Access token is missing or invalid
    ServerError:
      description: Server error
    ForbiddenError:
      description: Access token has incorrect scopes
    NotFoundError:
      description: Requested resource was not found
    FileStructureError:
      description: File structure couldn't be parsed correctly, or has an invalid filename
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
              code:
                type: string
                enum: ['TSV_PARSING_FAILED', 'INVALID_FILE_NAME']
          examples:
            TSVParseError:
              value:
                msg: 'string'
                code: 'TSV_PARSING_FAILED'
            InvalidFileNameError:
              value:
                msg: 'string'
                code: 'INVALID_FILE_NAME'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    BatchError:
      type: object
      properties:
        message:
          type: string
          description: a message describing the error
        type:
          type: string
          description: the type of error
          enum:
            - TSV_PARSING_FAILED
            - INVALID_FILE_NAME
            - INCORRECT_SECTION
            - MULTIPLE_TYPED_FILES
            - UNRECOGNIZED_HEADER
            - MISSING_REQUIRED_HEADER
        batchNames:
          type: array
          description: list of batch names causing error
          items:
            type: string
    ValidationError:
      type: object
      required:
        - index
        - type
        - fieldName
        - message
        - info
      properties:
        fieldName:
          type: string
          description: the field name that the error is related to
        info:
          type: object
          description: contains context information related to the error
          properties:
            value:
              type: string
              nullable: true
              description: the faulty value
            donorSubmitterId:
              type: string
              nullable: true
              description: the donor Id in that row
          additionalProperties: true
        index:
          type: number
          format: integer
          description: the 0 based index of the row for this error
        type:
          type: string
          description: the type of error
          enum:
            - DELETING_THERAPY
            - CONFLICTING_TIME_INTERVAL
            - ID_NOT_REGISTERED
            - INVALID_PROGRAM_ID
            - MUTATING_EXISTING_DATA
            - NEW_DONOR_CONFLICT
            - NEW_SAMPLE_ATTR_CONFLICT
            - NEW_SAMPLE_ID_CONFLICT
            - NEW_SPECIMEN_ATTR_CONFLICT
            - NEW_SPECIMEN_ID_CONFLICT
            - NOT_ENOUGH_INFO_TO_VALIDATE
            - SAMPLE_BELONGS_TO_OTHER_SPECIMEN
            - SPECIMEN_BELONGS_TO_OTHER_DONOR
            - RELATED_ENTITY_MISSING_OR_CONFLICTING
            - FOUND_IDENTICAL_IDS
            - MISSING_THERAPY_DATA
            - INVALID_THERAPY_DATA
            - INCOMPATIBLE_PARENT_TREATMENT_TYPE
            - TREATMENT_ID_NOT_FOUND
            - CLINICAL_ENTITY_BELONGS_TO_OTHER_DONOR
            - MISSING_VARIABLE_REQUIREMENT
            - FORBIDDEN_PROVIDED_VARIABLE_REQUIREMENT
            - THERAPY_RXNORM_RXCUI_NOT_FOUND
            - THERAPY_RXNORM_DRUG_NAME_INVALID
            - THERAPY_MISSING_RXNORM_FIELDS
            # dictionary schema errors
            - MISSING_REQUIRED_FIELD
            - INVALID_FIELD_VALUE_TYPE
            - INVALID_BY_REGEX
            - INVALID_BY_SCRIPT
            - INVALID_ENUM_VALUE
            - INVALID_BY_RANGE
            - UNRECOGNIZED_FIELD
    RegistrationValidationError: # "extends" ValidationError
      allOf:
        - $ref: '#/components/schemas/ValidationError'
        - properties:
            info:
              properties:
                sampleSubmitterId:
                  type: string
                  nullable: true
                  description: the sample Id in that row
                specimenSubmitterId:
                  type: string
                  nullable: true
                  description: the specimen Id in that row
    ValidationUpdate:
      type: object
      required:
        - fieldName
        - info
        - index
      properties:
        fieldName:
          type: string
          description: the field name that the error is related to
        info:
          type: object
          description: contains context information related to the update
          properties:
            oldValue:
              type: string
              nullable: true
              description: the old value in the field
            newValue:
              type: string
              nullable: true
              description: the new value in the field
            donorSubmitterId:
              type: string
              nullable: true
              description: the donor Id in that row
        index:
          type: number
          format: integer
          description: the 0 based index of the row for this error

    Registration:
      type: object
      required:
        - _id
        - programId
        - creator
        - stats
        - records
      properties:
        _id:
          type: string
          description: the id of the registration
        programId:
          type: string
          description: the program short name this registration is for
        creator:
          type: string
          description: first name and last name of the user who created this registration
        batchName:
          type: string
          description: a file that must start with registration and have .tsv extension
        stats:
          type: object
          properties:
            newDonorIds:
              $ref: '#/components/schemas/RegistrationStat'
            newSpecimenIds:
              $ref: '#/components/schemas/RegistrationStat'
            newSampleIds:
              $ref: '#/components/schemas/RegistrationStat'
            alreadyRegistered:
              $ref: '#/components/schemas/RegistrationStat'
        records:
          type: array
          items:
            $ref: '#/components/schemas/Record'
    ClinicalSubmission:
      type: object
      required:
        - _id
        - programId
        - version
        - clinicalEntities
        - state
        - updatedBy
        - updatedAt
      properties:
        _id:
          type: string
          description: the id of the registration
        programId:
          type: string
          description: the program short name this registration is for
        state:
          type: string
          description: the state of the submission
          enum: ['OPEN', 'VALID', 'INVALID', 'INVALID_BY_MIGRATION', 'PENDING_APPROVAL']
        version:
          type: string
          description: uuid used to ensure that correct version of submission is being updated
        updatedBy:
          type: string
          description: the lastest user to update the submission
        updatedAt:
          type: string
          description: the date/time of the last update
        clinicalEntities:
          type: object
          description: submitted clinical data mapped to a clinical type
          properties:
            clinicalType:
              $ref: '#/components/schemas/ClinicalEntity'
    ClinicalEntity:
      required:
        - batchName
        - creator
        - records
        - dataErrors
      properties:
        batchName:
          type: string
          description: a file that must start with entity type (e.g. donor, sample) and have .tsv extension
        creator:
          type: string
          description: first name and last name of the user who add this entity data
        records:
          type: array
          items:
            $ref: '#/components/schemas/Record'
        schemaErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        dataErrors:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        dataWarnings:
          type: array
          items:
            $ref: '#/components/schemas/ValidationError'
        dataUpdates:
          type: array
          items:
            $ref: '#/components/schemas/ValidationUpdate'
        stats:
          type: object
          properties:
            new:
              type: array
              items:
                type: integer
            noUpdate:
              type: array
              items:
                type: integer
            updated:
              type: array
              items:
                type: integer
            errorsFound:
              type: array
              items:
                type: integer

    Record:
      required:
        - program_id
        - submitter_donor_id
        - gender
        - submitter_specimen_id
        - specimen_tissue_source
        - tumour_normal_designation
        - specimen_type
        - submitter_sample_id
        - sample_type
      properties:
        program_id:
          type: string
        submitter_donor_id:
          type: string
        gender:
          type: string
        submitter_specimen_id:
          type: string
        specimen_tissue_source:
          type: string
        tumour_normal_designation:
          type: string
        specimen_type:
          type: string
        submitter_sample_id:
          type: string
        sample_type:
          type: string

    RegistrationStat:
      type: object

    CreateRegistration:
      required:
        - successful
      type: object
      properties:
        registration:
          $ref: '#/components/schemas/Registration'
        successful:
          type: boolean
          description: whether the file was valid or not
        errors:
          type: array
          description: list of all errors, should be empty on success
          items:
            $ref: '#/components/schemas/RegistrationValidationError'
        batchErrors:
          type: array
          description: list of all batch related errors, should be empty on success
          items:
            $ref: '#/components/schemas/BatchError'

    CreateSubmission:
      required:
        - successful
        - submission
      type: object
      properties:
        submission:
          $ref: '#/components/schemas/ClinicalSubmission'
        successful:
          type: boolean
          description: whether the file was valid or not
        schemaErrors:
          type: array
          description: list of all schema errors, should be empty on success
          items:
            $ref: '#/components/schemas/ValidationError'
        batchErrors:
          type: array
          description: list of all batch related errors, should be empty on success
          items:
            $ref: '#/components/schemas/BatchError'

    DictionaryMigration:
      type: object
      properties:
        _id?:
          type: string
        fromVersion:
          type: string
        toVersion:
          type: string
        state:
          type: string
          enum: ['OPEN', 'CLOSED']
        stage:
          type: string
          enum: ['SUBMITTED', 'ANALYZED', 'IN_PROGRESS', 'COMPLETED', 'FAILED']
        dryRun:
          type: boolean
        analysis:
          type: object
        stats:
          type: object
          properties:
            totalProcessed:
              type: number
            validDocumentsCount:
              type: number
            invalidDocumentsCount:
              type: number
        invalidDonorsErrors:
          type: object
        checkedSubmissions:
          type: object
        invalidSubmissions:
          type: object
        programsWithDonorUpdates:
          type: array
          items:
            type: string
        createdBy:
          type: string
        newSchemaErrors:
          type: object
          properties:
            clinicalType:
              type: object
              properties:
                missingFields:
                  type: array
                  items:
                    type: string
                invalidFieldCodeLists:
                  type: object
                  properties:
                    fieldName:
                      type: string
                    missingCodeListValue:
                      type: array
                      items:
                        type: string
